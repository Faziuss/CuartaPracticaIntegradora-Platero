paths:
  /api/products:
    get:
      summmary: Obtiene todos los productos
      tags: [Products]
      parameters:
        - in: query
          name: query
          schema:
            type: string
            description: Filtros de búsqueda en formato JSON
        - in: query
          name: sort
          schema:
            type: string
            enum: [asc, desc]
            description: Ordenar los productos por precio (ascendente o descendente)
        - in: query
          name: limit
          schema:
            type: integer
            description: Límite de productos por página
        - in: query
          name: page
          schema:
            type: integer
            description: Número de página para paginación
          responses:
            200":
              description: Productos obtenidos sastifactoriamente de la base de datos
              content:
                application/json:
                  schema:
                    type: array
                    products:
                      $ref: "#components/schemas/Product"
    post:
      summary: Agrega un nuevo producto
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/Product"
      responses:
        "200":
          description: Producto agregado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  product:
                    $ref: "#/components/schemas/Product"
  /api/products/mockingproducts:
    get:
      summary: Obtiene una lista mocking products
      tags: [Products]
      responses:
        "200":
          description: Lista de mocking products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
  /products/{pid}:
    get:
      summary: Obtiene un producto por ID
      tags: [Products]
      parameters:
        - in: path
          name: pid
          required: true
          schema:
            type: string
          description: ID del producto
      responses:
        "200":
          description: Producto encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  product:
                    $ref: "#/components/schemas/Product"
    put:
      summary: Actualiza producto un producto existente
      tags: [Products]
      parameters:
        - in: path
          name: pid
          required: true
          schema:
            type: string
          description: ID del producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/Product"
      responses:
        "200":
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    delete:
      summary: Elimina un producto existente
      tags: [Products]
      parameters:
        - in: path
          name: pid
          required: true
          schema:
            type: string
          description: ID del producto
      responses:
        "200":
          description: Producto eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  requestBodies:
    Product:
      type: object
      properties:
        title:
          type: string
          required: true
        description:
          type: string
          required: true
        code:
          type: string
          required: true
        price:
          type: number
          required: true
        status:
          type: boolean
          required: true
        stock:
          type: integer
          required: true
        category:
          type: string
          required: true
        thumbnails:
          type: array
          items:
            type: string
      example:
        title: "exampleProduct"
        description: "Descripción exampleProducto"
        code: "AAAAA2"
        price: 100
        status: true
        stock: 10
        category: "Example"
        thumbnails: ["image1.jpg", "image2.jpg"]
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        code:
          type: string
        price:
          type: number
        status:
          type: boolean
        stock:
          type: number
        category:
          type: string
        thumbnails:
          type: array
          items:
            type: string
        owner:
          type: string
          default: "Admin"
